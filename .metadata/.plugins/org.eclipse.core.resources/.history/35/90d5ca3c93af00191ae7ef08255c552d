package GraphAdapt;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

import Graph.GraphClass;
import Graph.GraphClass.EdgeInfo;
import Graph.GraphClass.Vertex;

public class DijkstraAlgorithm implements GraphAdapt {
	private int[] dist;
	@Override
	public void run(GraphClass graph) {
		
		// TODO Auto-generated method stub
		dist = new int[graph.getVertex().size()];
		Vertex start_vertex;
		for(int i = 0 ; i <dist.length ; i++)
		{
			dist[i] = Integer.MAX_VALUE;
		}
		{
			int start = new Scanner(System.in).nextInt();
			start_vertex = graph.getVertex().get(start-1);
			dist[start] = 0;
		}
		process(start_vertex);
	}
	private void process(Vertex start)
	{
		Vertex now_vertex;
		now_vertex = start;
		Iterator<EdgeInfo> iterator;
		Stack<Vertex> stack  = new Stack<Vertex>();
		{
			iterator = now_vertex.getEdge().iterator();
			while(iterator.hasNext())
			{
				EdgeInfo edge = (EdgeInfo)iterator.next();
				stack.add(edge.getVertexafter());
				dist[edge.getVertexafter().getNumber()] = (dist[edge.getVertexafter().getNumber()] > edge.getEdge_value()+dist[now_vertex.getNumber()])? 
						edge.getEdge_value()+dist[now_vertex.getNumber()]:dist[edge.getVertexafter().getNumber()];
			}
			while(stack.isEmpty())
			{
				int min;
				min = dist[stack.pop().getNumber()];
			}
		}
	}
}
