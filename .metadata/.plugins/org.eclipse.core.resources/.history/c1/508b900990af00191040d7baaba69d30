package GraphAdapt;

import java.util.Iterator;
import java.util.Scanner;

import Graph.GraphClass;
import Graph.GraphClass.EdgeInfo;
import Graph.GraphClass.Vertex;

public class DijkstraAlgorithm implements GraphAdapt {
	private int[] dist;
	@Override
	public void run(GraphClass graph) {
		
		// TODO Auto-generated method stub
		dist = new int[graph.getVertex().size()];
		Scanner scanner = new Scanner(System.in);
		Vertex start_vertex,finish_vertex;
		for(int i = 0 ; i <dist.length ; i++)
		{
			dist[i] = Integer.MAX_VALUE;
		}
	
		{
			int start = scanner.nextInt();
			start_vertex = graph.getVertex().get(start-1);
			dist[start] = 0;
		}
		process(start_vertex);
	}
	private void process(Vertex start)
	{
		Vertex now_vertex;
		now_vertex = start;
		Iterator iterator;
		
		iterator = now_vertex.getEdge().iterator();
		while(iterator.hasNext())
		{
			EdgeInfo edge = (EdgeInfo)iterator.next();
			if(dist[edge.getVertexafter().getNumber()] < edge.getEdge_value())
				dist[edge.getVertexafter().getNumber()] += edge.getEdge_value();
			
		}
	}
}
